name: Deploy ECS Infrastructure, update ECR 
run-name: ${{ github.actor }} is sweating and praying ...

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    
env:
  TF_VERSION: 1.5.0 
  AWS_ECR_TGT: ${{ vars.AWS_USER_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com  
    
jobs:
      
  docker-build-upload-terraform-ecs:        
    name: 'Docker build, terraform ECS'      
    runs-on: ubuntu-latest
    environment: dev
              
    permissions:
      contents: read
      id-token: write          
          
    steps:          

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: ${{ env.TF_VERSION }}   

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}           
    
      - name: Terraform create ECR repository
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
        
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_aws_container_repo_name: ${{ vars.AWS_ECR_REPO_NAME }}
          
          TF_IN_AUTOMATION: true
          TF_INPUT: false
          TF_WORKSPACE: dev
          
        run: |
          terraform init
          terraform plan -no-color -target=aws_ecr_repository.mynginx -out=tfplan
          terraform apply -auto-approve -no-color tfplan         
          
      - name: Building docker image, uploading to ECR
        run: |   
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_TGT }}
          docker build -t ${{ vars.AWS_ECR_REPO_NAME }} .
          docker tag ${{ vars.AWS_ECR_REPO_NAME }}:latest ${{ env.AWS_ECR_TGT }}/${{ vars.AWS_ECR_REPO_NAME }}:latest
          docker push ${{ env.AWS_ECR_TGT }}/${{ vars.AWS_ECR_REPO_NAME }}:latest
          
# Předchozí krok lze ekvivalentně zapsat:          
#    - name: Login to ECR
#      uses: docker/login-action@v3
#      with:
#        registry: ${{ env.AWS_ECR_TGT }}
#        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      
#    - name: Build and push Docker image
#      uses: docker/build-push-action@v4
#      with:
#        push: true
#        context: .
#        tags: ${{ env.AWS_ECR_TGT }}/${{ vars.AWS_ECR_REPO_NAME }}:latest       

    - 
